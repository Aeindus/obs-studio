name: 'BUILD'

on:
  push:
    paths-ignore: ['**.md','**.rst']
    branches:
      - master
      - 'release/**'
    tags: ['*']
  workflow_dispatch:
    paths-ignore: ['**.md','**.rst']
    branches:
      - master
      - 'release/**'
    tags: ['*']

env:
  CACHE_REVISION: '004'
  CEF_BUILD_VERSION_MAC: '4638'
  CEF_HASH_MAC_X86_64: '2fe4cc39b1373b85086e4030dedd2a250d5dbbed8c2f8780002d6cd6214b6bc2'
  CEF_HASH_MAC_ARM64: '27809aac427b9c97b0dadcab04371c5f8211f36c6f3e1caa00822de89c5ed249'
  CEF_BUILD_VERSION_LINUX: '4638'
  CEF_BUILD_VERSION_WIN: '4638'
  QT_VERSION_MAC: '5.15.2'
  QT_HASH_MAC_X86_64: '13787c6c21b931373833652d5016dd80634110c2b735eb0bf03b4c77b86a4489'
  QT_HASH_MAC_ARM64: 'a94450719eaf738c8a29f1375757f832e9bfb02c02e5333ed9cde6fa85860a27'
  QT_HASH_MAC_UNIVERSAL: 'f8885ba0952740dc3f0d2bf966a05cc181e1dcd17a43bcf14f9a480fd95d65d1'
  QT_VERSION_WIN: '5.15.2'
  DEPS_VERSION_MAC: '2022-07-18'
  DEPS_HASH_MAC_X86_64: 'd2fc48e4cbcef840d59d6122f0e78f69602ff8f6264ea9a6fdfcfce88607e98d'
  DEPS_HASH_MAC_ARM64: '1386418e41a60d83dd7de8742ede3d13ebb27b40ded6e7e41c00fd85a677a09d'
  DEPS_VERSION_WIN: '2022-07-18'
  VLC_VERSION_MAC: '3.0.8'
  VLC_HASH_MAC: 'e0149ef4a20a19b9ecd87309c2d27787ee3f47dfd47c6639644bc1f6fd95bdf6'
  VLC_VERSION_WIN: '3.0.0-git'

jobs:
  windows_build:
    name: '02 - Windows'
    runs-on: [windows-2022]
    if: always()
    strategy:
      matrix:
        arch: [x64, x86]
    env:
      CMAKE_GENERATOR: 'Visual Studio 17 2022'
      CMAKE_SYSTEM_VERSION: '10.0.18363.657'
      VIRTUALCAM-GUID: 'A3FCE0F5-3493-419F-958A-ABA1250EC20B'
      BUILD_FOR_DISTRIBUTION: ${{ startsWith(github.ref, 'refs/tags/') && github.event_name != 'pull_request' }}
    defaults:
      run:
        working-directory: 'obs-studio'
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          path: 'obs-studio'
          fetch-depth: 0

      - name: 'Add msbuild to PATH'
        uses: microsoft/setup-msbuild@v1.1

      - name: 'Restore VLC dependency from cache'
        id: vlc-cache
        uses: actions/cache@v3
        env:
          CACHE_NAME: 'vlc-cache'
        with:
          path: ${{ github.workspace }}/obs-build-dependencies/vlc-${{ env.VLC_VERSION_WIN }}
          key: ${{ runner.os }}-pr-${{ env.CACHE_NAME }}-${{ env.VLC_VERSION_WIN }}-${{ env.CACHE_REVISION }}

      - name: 'Restore Chromium Embedded Framework from cache'
        id: cef-cache
        uses: actions/cache@v3
        env:
          CACHE_NAME: 'cef-cache'
        with:
          path: ${{ github.workspace }}/obs-build-dependencies/cef_binary_${{ env.CEF_BUILD_VERSION_WIN }}_windows_${{ matrix.arch }}
          key: ${{ runner.os }}-pr-${{ env.CACHE_NAME }}-${{ env.CEF_BUILD_VERSION_WIN }}-${{ matrix.arch }}-${{ env.CACHE_REVISION }}

      - name: Setup Environment
        id: setup
        run: |
          $CommitHash = git rev-parse --short=9 HEAD
          Write-Output "::set-output name=commitHash::${CommitHash}"

      - name: 'Install dependencies'
        env:
          RESTORED_VLC: ${{ steps.vlc-cache.outputs.cache-hit }}
          RESTORED_CEF: ${{ steps.cef-cache.outputs.cache-hit }}
        run: CI/windows/01_install_dependencies.ps1 -BuildArch ${{ matrix.arch }}

      - name: 'Build OBS'
        run: CI/windows/02_build_obs.ps1 -BuildArch ${{ matrix.arch }}

      - name: 'Create build artifact'
        if: ${{ success() && (github.event_name != 'pull_request' || env.SEEKING_TESTERS == '1') }}
        run: |
          CI/windows/03_package_obs.ps1 -BuildArch ${{ matrix.arch }} -Package
          $ArtifactName = Get-ChildItem -filter "OBS-Studio-*-Win-${{ matrix.arch }}.zip" -File
          Write-Output "FILE_NAME=${ArtifactName}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

      - name: 'Upload build artifact'
        if: ${{ success() && (github.event_name != 'pull_request' || env.SEEKING_TESTERS == '1') }}
        uses: actions/upload-artifact@v3
        with:
          name: 'obs-win-${{ matrix.arch }}-${{ steps.setup.outputs.commitHash }}'
          path: '${{ env.FILE_NAME }}'

  windows_debug_package:
    name: '04 - Windows Custom Installer'
    runs-on: [windows-latest]
    needs: [windows_build]
    if: always()
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3

      - name: Setup Environment
        id: setup
        run: |
          $CommitHash = git rev-parse --short=9 HEAD
          Write-Output "::set-output name=commitHash::${CommitHash}"

      - name: 'Add msbuild to PATH'
        uses: microsoft/setup-msbuild@v1.1

      - name: 'Download 64-bit artifact'
        uses: actions/download-artifact@v3
        with:
          name: 'obs-win-x64-${{ steps.setup.outputs.commitHash }}'

      - name: 'Download 32-bit artifact'
        uses: actions/download-artifact@v3
        with:
          name: 'obs-win-x86-${{ steps.setup.outputs.commitHash }}'

      - name: 'Unpack Windows build artifacts'
        id: unpack
        run: |
          if (!(Test-Path install_temp)) {
            $null = New-Item -ItemType Directory -Force -Path install_temp
          }

          Expand-Archive -Path "$(Get-ChildItem -filter "OBS-Studio-*-Win-x86.zip" -File)" -DestinationPath install_temp
          Expand-Archive -Path "$(Get-ChildItem -filter "OBS-Studio-*-Win-x64.zip" -File)" -Force -DestinationPath install_temp

          CI/windows/04_package_obs_static_version.ps1 -CombinedArchs -Package -Version "30.0.0"

          $ArtifactName = (Get-ChildItem -filter "OBS-Studio-*-Win-x86+x64.zip" -File).Name
          Write-Output "::set-output name=filename::${ArtifactName}"

      - name: 'Upload build artifact'
        uses: actions/upload-artifact@v3
        with:
          name: 'obs-windows'
          path: '${{ steps.unpack.outputs.filename }}'

  windows_package:
    name: '03 - Windows Installer'
    runs-on: [windows-latest]
    needs: [windows_build]
    if: ${{ startsWith(github.ref, 'refs/tags/') && github.event_name != 'pull_request' }}
    env:
      BUILD_FOR_DISTRIBUTION: 'ON'
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3

      - name: Setup Environment
        id: setup
        run: |
          $CommitHash = git rev-parse --short=9 HEAD
          Write-Output "::set-output name=commitHash::${CommitHash}"

      - name: 'Add msbuild to PATH'
        uses: microsoft/setup-msbuild@v1.1

      - name: 'Download 64-bit artifact'
        uses: actions/download-artifact@v3
        with:
          name: 'obs-win-x64-${{ steps.setup.outputs.commitHash }}'

      - name: 'Download 32-bit artifact'
        uses: actions/download-artifact@v3
        with:
          name: 'obs-win-x86-${{ steps.setup.outputs.commitHash }}'

      - name: 'Unpack Windows build artifacts'
        id: unpack
        run: |
          if (!(Test-Path install_temp)) {
            $null = New-Item -ItemType Directory -Force -Path install_temp
          }

          Expand-Archive -Path "$(Get-ChildItem -filter "OBS-Studio-*-Win-x86.zip" -File)" -DestinationPath install_temp
          Expand-Archive -Path "$(Get-ChildItem -filter "OBS-Studio-*-Win-x64.zip" -File)" -Force -DestinationPath install_temp

          CI/windows/03_package_obs.ps1 -CombinedArchs -Package

          $ArtifactName = (Get-ChildItem -filter "OBS-Studio-*-Win-x86+x64.zip" -File).Name
          Write-Output "::set-output name=filename::${ArtifactName}"

      - name: 'Upload build artifact'
        uses: actions/upload-artifact@v3
        with:
          name: 'obs-windows'
          path: '${{ steps.unpack.outputs.filename }}'
